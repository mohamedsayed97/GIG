@model ICP_ABC.Areas.Redemptions.Models.CreateRedemptionViewModel
@{ /**/
                /**/
                /**/
                /**/

                ViewBag.Title = "Subscription";
                Layout = "~/Views/Shared/_Layout.cshtml";
                string servername = System.Web.Configuration.WebConfigurationManager.AppSettings["servername_URL"];

}
<h2>Redemption Setup: (Update)</h2>
@using (Html.BeginForm("", "", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "CreateForm", @onsubmit = "return myFunction()", style = "margin-top:50px" }))
{
    <div style="margin-bottom:70px;">
        @Html.AntiForgeryToken()
        <p class="text-danger">@Html.ValidationSummary(true)</p>
        <div class="horizontal">
            <div class="row">

                <div class="form-group col-sm-4">
                    @Html.LabelFor(model => model.code, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.code, new { htmlAttributes = new { @class = "form-control form-control-sm", @readOnly = "readOnly" } })
                        @Html.ValidationMessageFor(model => model.code, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-sm-4 ">
                    @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control ", id = "CustName", @readonly = "readonly" } })
                    </div>
                </div>
                <div class="form-group col-md-4 ">
                    @Html.LabelFor(model => model.fund_id, htmlAttributes: new { @class = "control-label Cities" })
                    <div class="col-md-7">
                        @Html.DropDownListFor(model => model.fund_id, ViewData["Funds"] as SelectList, new { @class = "form-control FundsDrpDwn ", id = "FundsDrpDwn", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.fund_id, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">


                <div class="form-group col-sm-4">
                    @Html.LabelFor(model => model.pay_method, htmlAttributes: new { @class = "control-label Cities" })
                    <div class="col-md-7">
                        <select class="form-control" name="pay_method" id="MethoddDrpDwn">
                            @{string[] Methods = new string[] { "By Units", "By Amount" };}
                            <option value="">Select One</option>
                            @foreach (var Method in Methods)
                            {
                                <option name="pay_method" value="@Method">@Method</option>
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.pay_method, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.units, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.units, new { htmlAttributes = new { @class = "form-control form-control-sm", @readOnly = "readOnly", id = "units", @type = "text", onkeyup = "javascript:this.value=Comma(this.value)" } })
                        @Html.ValidationMessageFor(model => model.units, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.amount_3, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.amount_3, new { htmlAttributes = new { @class = "form-control form-control-sm", @readOnly = "readOnly", id = "TotalUnit" } })
                        @Html.ValidationMessageFor(model => model.amount_3, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="row">

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.NAV, htmlAttributes: new { @class = "control-label Cities" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.NAV, new { htmlAttributes = new { @class = "form-control form-control-sm", @readOnly = "readOnly", id = "Nav" } })
                        @Html.ValidationMessageFor(model => model.NAV, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.nav_date, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.nav_date, new { htmlAttributes = new { @class = "form-control form-control-sm", @readOnly = "readOnly", id = "NavDate" } })
                        @Html.ValidationMessageFor(model => model.nav_date, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Nav_Ddate, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.Nav_Ddate, new { htmlAttributes = new { @class = "form-control form-control-sm", @readOnly = "readOnly", id = "Nav_Ddate" } })
                        @Html.ValidationMessageFor(model => model.Nav_Ddate, "", new { @class = "text-danger" })
                    </div>
                </div>


            </div>
            <div class="row">
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.ProcessingDate, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.ProcessingDate, new { htmlAttributes = new { @class = "form-control form-control-sm", @readOnly = "readOnly", id = "ProcessingDate" } })
                        @Html.ValidationMessageFor(model => model.ProcessingDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4">
                    @Html.Label("total amount to be debit", htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.total, new { htmlAttributes = new { @class = "form-control form-control-sm ", @readOnly = "readOnly", id = "TotalAmount" } })
                        @Html.ValidationMessageFor(model => model.total, "", new { @class = "text-danger" })
                    </div>
                </div>


            </div>

        </div>
    </div>
    <div class="ButtonsControl">
        <div class="text-center" style="padding-top:15px;">
            <div class="btn-group col-md-5" role="group" aria-label="Basic example">
                <button type="submit" id="CheckCodeMap" class="btn btn-primary"><i class="fa fa-save"></i> Apply</button>
                <a href="~/Redemptions/Redemption/Details?Code=@Model.code" class="btn btn-primary"><i class="fa fa-times-circle"></i> Cancel</a>
            </div>
        </div>
    </div>}
@section scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {

            setComma();
            $('#CreateForm').validate({ // initialize the plugin
                rules: {
                    units: {
                        required: true,
                        // minlength: 5//,
                        //maxlenght: 10
                    },
                    CustomerName: {
                        required: true
                        // minlength: 5//,
                        //maxlenght: 10
                    }
                },
                messages: {
                    units: {
                        required: "custom message for field 1 required",
                        //minlength: "custom message: {0} chars required"
                    }
                },
                errorClass: "text-danger"
                //submitHandler: function (form) { // for demo
                //    alert('valid form submitted'); // for demo
                //    return false; // for demo
                //}
            })

            $('[name="units"]').rules('add', {
                messages: {
                    //required: "field 1 required",
                    //minlength: "{0} chars required"
                }
            });


        });




    </script>
    <script>

        FundFun = new Promise(function (resolve, reject) {

            $('#NavDate').val(null);
            $('#Nav').val(null);


            $("#MethoddDrpDwn").attr("disabled", false);
            var fundId = $("#FundsDrpDwn :selected").val();

            $.ajax({
                type: "Post",
                url: '@servername/Subscriptions/Subscription/GetICPriceInfo', // the method we are calling
                contentType: "application/x-www-form-urlencoded",
                data: { FundId: fundId },//, 'Code': Code, 'GroupID': GroupID },
                dataType: "Json",
                success: function (result) {
                    if (result.DayNotValid == "1") {
                        alert("This Day is Not available to Create");
                        $("#FundsDrpDwn").attr("disabled", "disabled");
                        $('#NavDate').val(null);
                        $('#Nav').val(null);

                    }
                    else {

                        Fund = JSON.parse(result);


                        //Date
                        var dateString = Fund.Date;
                        var d = new Date(dateString);
                        var Format = (d.getMonth() + 1) + '/' + d.getDate() + '/' + d.getFullYear();

                        var dateString1 = Fund.Nav_Ddate;
                        var d = new Date(dateString1);
                        var Format1 = (d.getMonth() + 1) + '/' + d.getDate() + '/' + d.getFullYear();

                        var dateString2 = Fund.ProcessingDate;
                        var d = new Date(dateString2);
                        var Format2 = (d.getMonth() + 1) + '/' + d.getDate() + '/' + d.getFullYear();

                        $('#Nav_Ddate').val(Format1);
                        $('#Nav').val(Comma(Fund.Nav));
            $('#NavDate').val(Format);
            $('#ProcessingDate').val(Format2);



            finalTotalUnit = removeCommas($('#TotalUnit').val());
        
                    }

                },
                error: function (result) {


                }
            });
        });


        $('#units').change(function () {

            var nav = Fund.Nav; //$('#Nav').val();
            var Unit = removeCommas($('#units').val()); //Math.floor(totalUnit / nav);
            var finalTotalUnit = Unit * nav;
            $('#TotalUnit').val(Comma(finalTotalUnit.toFixed(2)));

            $('#TotalAmount').val(Comma(finalTotalUnit.toFixed(2)));


        });

        $('#TotalUnit').change(function () {


            var nav = Fund.Nav; //$('#Nav').val();

            var totalUnit = removeCommas($('#TotalUnit').val());
            var Unit = Math.floor(Comma(totalUnit / nav));
            var finalTotalUnit = Unit * nav;
            $('#TotalUnit').val(Comma(finalTotalUnit.toFixed(2)));
            $('#units').val(Unit);
            $('#TotalAmount').val(Comma(finalTotalUnit.toFixed(2)));

        });
    </script>
    <script>

        function Comma(Num) {
            debugger//function to add commas to textboxes
            Num += '';
            Num = Num.replace(',', '');
            Num = Num.replace(',', ''); Num = Num.replace(',', '');
            Num = Num.replace(',', ''); Num = Num.replace(',', ''); Num = Num.replace(',', '');
            x = Num.split('.');
            x1 = x[0];
            x2 = x.length > 1 ? '.' + x[1] : '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(x1))
                x1 = x1.replace(rgx, '$1' + ',' + '$2');
            return x1 + x2;
        }



        function removeCommas(str) {
            while (str.search(",") >= 0) {
                str = (str + "").replace(',', '');
            }
            return str;
        }

    </script>
    <script type="text/javascript">
        function myFunction() {
            debugger
            $('#units').val(removeCommas($('#units').val()));
            $('#Nav').val(removeCommas($('#Nav').val()));
            $('#TotalUnit').val(removeCommas($('#TotalUnit').val()));
            $('#TotalAmount').val(removeCommas($('#TotalAmount').val()));
            return true;

        }
        function setComma() {
            debugger
            if ($('#units').val() != null || $('#units').val() != "") $('#units').val(Comma($('#units').val()));
            if ($('#Nav').val() != null || $('#Nav').val() != "") $('#Nav').val(Comma($('#Nav').val()));
            if ($('#TotalUnit').val() != null || $('#TotalUnit').val() != "") $('#TotalUnit').val(Comma($('#TotalUnit').val()));
            if ($('#TotalAmount').val() != null || $('#TotalAmount').val() != "") $('#TotalAmount').val(Comma($('#TotalAmount').val()));
            return true;

        }
    </script>
    <script>
        //Method Functions
        $("#MethoddDrpDwn").change(function () {
            debugger
            var selectedVal = $("#MethoddDrpDwn :selected").val();

            if (selectedVal == "By Units") {
                byUnit();
            }
            else if (selectedVal == "By Amount") {

                byAmount();
            }
            else {
                alert("bad choise");
            }
        });

        function byUnit() {

            $("#units").prop("readonly", false);
            $('#units').val(null);
            $("#TotalUnit").prop("readonly", true);
            $('#TotalUnit').val(null);
            $('#TotalAmount').val(null);
        }

        function byAmount() {

            $('#units').val(null);
            $("#TotalUnit").prop("readonly", false);
            $("#units").prop("readonly", true);
            $('#TotalUnit').val(null);
            $('#TotalAmount').val(null);
        }
    </script>


}
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
